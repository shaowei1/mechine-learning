def delete_ac_b(s):    """    'acbac' ==> ''    'aaac' ==> 'aa'    'ababc' ==> 'a'    :return:    """    if 'ac' in s:        s = s.replace('ac', '')    elif 'b' in s:        s = s.replace('b', '')    if ('ac' not in s) and ('b' not in s):        return s    else:        delete_ac_b(s)def judge_common(A, B):    """    找出时候相似    :param A:    :param B:    :return:    """    dic1 = dict()    for i in A:        if i in dic1:            dic1[i] += 1        dic1[i] = 1    dic2 = dict()    for i in B:        if i in dic2:            dic2[i] += 1        dic2[i] = 1    if dic1 == dic2:        return True    return Falseclass my_queue():    def __init__(self):        self.q = []    def tail_insert(self, item):        self.q.append(item)    def pop_head(self):        return (self.q[0])    def delete_head(self):        self.q.pop(0)    def get_max(self):        return max(self.q)    def __str__(self):        return '%s' % self.qdef judge_x_to_y(x, y):    if x % 2 == 0:        if x + 1 == y:            return True        if 2 * x == y:            return True        judge_x_to_y(2 * x, y)        judge_x_to_y(x + 1, y)    if x % 2 == 1:        if 2 * x == y:            return True        judge_x_to_y(2 * x, y)    return Falsedef sort_list(lis):    """    排序    :param lis:    :return:    """    high = len(lis) - 1    res = list([lis[0]])    low = 1    while low < high:        if lis[low] < lis[high]:            res.append(lis[low])            low += 1        else:            res.append(lis[high])            high -= 1    return resif __name__ == '__main__':    print(sort_list([1, 2, 3, 3, 2, 2, 1]))"""任意选一个数据结构存n个数,随机取一个数,哪种数据结构时间复杂度是log(n)"""