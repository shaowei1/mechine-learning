from collections import defaultdictfrom heapq import heapify, heappop, heappushfrom math import sqrtdef prim(nodes, edges):    conn = defaultdict(list) # 每个点能连接的所有点    for n1, n2, c in edges:        conn[n1].append((c, n1, n2))        conn[n2].append((c, n2, n1))    mst = []    used = set(nodes[0]) # 被使用的node    usable_edges = conn[nodes[0]][:] # 可以使用的node    heapify(usable_edges)    while usable_edges:        cost, n1, n2 = heappop(usable_edges)        if n2 not in used:            used.add(n2)            mst.append((n1, n2, cost))            for e in conn[n2]:                if e[2] not in used:                    heappush(usable_edges, e)    return mstdef test():    # test    nodes = list("ABCDEFG")    edges = [("A", "B", 7), ("A", "D", 5),             ("B", "C", 8), ("B", "D", 9), ("B", "E", 7),             ("C", "E", 5),             ("D", "E", 15), ("D", "F", 6),             ("E", "F", 8), ("E", "G", 9),             ("F", "G", 11)]    print("prim:", prim(nodes, edges))def get_Nodes_Edges(lis):    length = len(lis)    nodes = list(chr(i + 65) for i in range(length))    edges = list()    for i in range(length):        for j in range(i + 1, length):            edges.append((nodes[i], nodes[j], two_point_distance(lis[i], lis[j])))            # print(nodes[i], nodes[j], lis[i], lis[j])    return nodes, edgesdef two_point_distance(a, b):    return sqrt(pow((a[0] - b[0]), 2) + pow((a[1] - b[1]), 2))def main(point_list):    """    >>> main([[0, 1], [4, 0], [6, -2], [7, 4]])    [[0, 1], [1, 2], [1, 3]]    """    noeds, edges = get_Nodes_Edges(point_list)    mst = prim(nodes=noeds, edges=edges)    # list((ord(node[0]) - 65, ord(node[1]) - 65) for node in mst)    res = list()    for node in mst:        res.append([ord(node[0]) - 65, ord(node[1]) - 65])    return resif __name__ == '__main__':    import doctest    doctest.testmod()