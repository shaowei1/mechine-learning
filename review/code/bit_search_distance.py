# from random import randint### def make_random_number():#     for i in range(10):#         print('%06d' % randint(0, 999999))### from collections import Counter# import pandas as pd### # print(a.count(1))# # result = Counter(a)# # result = pd.value_counts(a)# # print(result)# # print(type(result))#def bitSearch(data, num):    s = 0    e = len(data) - 1    while (s <= e):        mid = (e - s) // 2 + s        if (data[mid] < num):            s = mid + 1        elif (data[mid] > num):            e = mid - 1    return sdef solution(filename):    with open(filename, 'r') as f:        for i, line in enumerate(f):            try:                a = line.index('a')                b = line.index('b')                if b > a:                    print(i + 1, a, b)            except:                passdef cross_point(line1, line2):    """    line1 = [1, 1, -1, -1]    line2 = [-1, 1, 1, -1]    :param line1:    :param line2:    :return:    """    x1 = line1[0]    y1 = line1[1]    x2 = line1[2]    y2 = line1[3]    x3 = line2[0]    y3 = line2[1]    x4 = line2[2]    y4 = line2[3]    k1 = (y2 - y1) * 1.0 / (x2 - x1)    b1 = y1 * 1.0 - x1 * k1 * 1.0    if (x4 - x3) == 0:        k2 = None        b2 = 0    else:        k2 = (y4 - y3) * 1.0 / (x4 - x3)        b2 = y3 * 1.0 - x3 * k2 * 1.0    if k2 == None:        x = x3    else:        x = (b2 - b1) * 1.0 / (k1 - k2)    y = k1 * x * 1.0 + b1 * 1.0    return [x, y]