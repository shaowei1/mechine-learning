def delete_ac_b(s):    """    >>> delete_ac_b('acbac')    ''    >>> delete_ac_b('aaac')    'aa'    >>> delete_ac_b('ababc')    'a'    :return:    """    if 'ac' in s:        s = s.replace('ac', '')    if 'b' in s:        s = s.replace('b', '')    if ('ac' not in s) and ('b' not in s):        return s    else:        return (delete_ac_b(s))def judge_common(A, B):    """    找出时候相似    >>> judge_common('abcda', 'aabcd')    True    >>> judge_common('abcd', 'bcd')    False    """    dic1 = dict()    for i in A:        if i in dic1:            dic1[i] += 1        else:            dic1[i] = 1    dic2 = dict()    for i in B:        if i in dic2:            dic2[i] += 1        else:            dic2[i] = 1    if dic1 == dic2:        return True    return Falseclass my_queue():    def __init__(self):        self.q = []    def tail_insert(self, item):        self.q.append(item)    def pop_head(self):        return (self.q[0])    def delete_head(self):        self.q.pop(0)    def get_max(self):        return max(self.q)    def __str__(self):        return '%s' % self.qdef judge_x_to_y(x, y):    """ x 是否有可能变成y    >>> judge_x_to_y(10, 22)    True    >>> judge_x_to_y(10, 21)    True    >>> judge_x_to_y(2, 67)    True    """    if x < y:        if x % 2 == 0:            if x + 1 == y:                return True            elif 2 * x == y:                return True            return (judge_x_to_y(2 * x, y) or judge_x_to_y(x + 1, y))        else:            if 2 * x == y:                return True            return (judge_x_to_y(2 * x, y))    else:        return Falsedef sort_list(lis):    """    排序    >>> sort_list([0, 1, 1, 3, 4, 3, 2, -1])    [-1, 0, 1, 1, 2, 3, 3, 4]    """    high = len(lis) - 1    res = list()    low = 0    while low <= high:        if lis[low] < lis[high]:            res.append(lis[low])            low += 1        else:            res.append(lis[high])            high -= 1    return resdef convert_num(num):    """    >>> convert_num(123456789)    326159487    """    # 输入一个数字1 234 5 678 9,输出(3, 26, 159, 48, 7)    # 012    # 345    # 678    # 123    # 456    # 789    # 可以45度看这个矩阵    # res = collections.OrderedDict()    res = dict()    num = str(num)    for key, value in enumerate(num):        i = (key % 3) - (key // 3)        if i in res:            res[i] += value        else:            res[i] = value    return int(''.join([elm[1] for elm in sorted(res.items(), reverse=True)]))def find_different():    import difflib    text1_lines = 'abkkkk'    text2_lines = 'abcd'    d = difflib.Differ()    diff = d.compare(text1_lines, text2_lines)    print([i for i in diff])"""任意选一个数据结构存n个数,随机取一个数,哪种数据结构时间复杂度是log(n)"""if __name__ == '__main__':    import doctest    doctest.testmod()    pass