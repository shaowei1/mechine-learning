"""index  0  1 2 3  4 5arr = [3 34 4 12 5 2]S = 9if 存在 arr[i] + arr[j] == 0:    :return trueelse:    :return Falsesubset(i, S)    i: 当前看第i个数字    S: 加出来的和(9)Subset(arr[5], 9)递归出口:Subset(arr[2], 0) # return TrueSubset(arr[0], 3) # 必须arr[0] == 3真没有杀死猎物之前, 谁都有可能成为猎物"""import numpy as npdef rec_subset(arr, i, s):    if s == 0:        return True    elif i == 0:        return arr[0] == s    elif arr[i] > s:        return rec_subset(arr, i - 1, s)    else:        A = rec_subset(arr, i - 1, s - arr[i])        B = rec_subset(arr, i - 1, s)        return A or Bdef dp_subset(arr, S):    subset = np.zeros((len(arr), S + 1,), dtype=bool)    subset[:, 0] = True    subset[0, :] = False    subset[0, arr[0]] = True    for i in range(1, len(arr)):        for s in range(1, S + 1):            if arr[i] > s:                subset[i, s] = subset[i - 1, s]            else:                A = subset[i - 1, s - arr[i]]                B = subset[i - 1, s]                subset[i, s] = A or B    r, c = subset.shape    return subset[r - 1, c - 1]if __name__ == '__main__':    arr = [3, 34, 4, 12, 5, 2]    print(dp_subset(arr, 9))    print(dp_subset(arr, 13))    # print(rec_subset(arr, len(arr) - 1, 9))    # print(rec_subset(arr, len(arr) - 1, 10))    # print(rec_subset(arr, len(arr) - 1, 11))    # print(rec_subset(arr, len(arr) - 1, 13))