class Hompare_Horse():    # 设置齐王的马跑完所需时间    q_horses_time = {        "q1": 1.0,        "q2": 2.0,        "q3": 3.0,    }    # 设置田忌的马跑完所需时间    t_horses_time = {        "t1": 1.5,        "t2": 2.5,        "t3": 3.5,    }    def permutate(self, horses, result):        """        @Description: 找出所有可能马匹处长顺序        @param horses: 目前还剩多少马匹没有出战        @param result: 保存当前已经出战的马匹及顺序        """        # 所有马匹都已经出战，判断哪方获胜，输出结果        if (len(horses) == 0):            print(result)            compare_horse(result, q_horses)            return        for i in range(len(horses)):            """从剩下的未出战的马匹中，选择一匹加入结果"""            new_result = list()            new_result.append(horses[i])            """将已选择的马匹从未出战的列表中移出"""            rest_horses = list()            rest_horses.pop(i)            self.permutate(rest_horses, new_result)    def compare_horse(self, t, q):        t_won_cnt = 0        for i in range(len(t)):            print(self.t_horses_time.get(i))    def run(self):        horses = ["t1", "t2", "t3"]        lis = list()        self.compare_horse(horses, lis)import copydef get_password(n, result=''):    """    :param n: 剩下的位数    :param result:    :return:    """    password = 'bacdce'    classes = ['a', 'b', 'c', 'd', 'e']    if n == 0:        if result == password:            print(password)    else:        for i in classes:            new_result = copy.copy(result)            new_result = new_result + i            get_password(n - 1, new_result)# get_password(6)