class Merge():    def merge_sort(self, to_sort):        if not to_sort:            return [0]        lenth = len(to_sort)        if lenth == 1:            return to_sort        mid = lenth // 2        left = to_sort[0: mid]        right = to_sort[mid: lenth]        left = self.merge_sort(left)        right = self.merge_sort(right)        merged = self.merge(left, right)        return merged    def merge(self, A, B):        res = list()        lenth_A = len(A)        lenth_B = len(B)        i = 0        j = 0        while i < lenth_A and j < lenth_B:            if A[i] < B[j]:                res.append(A[i])                i += 1            else:                res.append(B[j])                j += 1        if i >= lenth_A:            res.extend(B[j:])        if j >= lenth_B:            res.extend(A[i:])        return resif __name__ == '__main__':    to_sort = [8, 7, 6, 5, 4, 3, 2, 1]    m = Merge()    sort_list = m.merge_sort(to_sort)    # sort_list = m.merge([1, 2, 3, 4], [3, 9, 10, 10, 11, 13])    print(sort_list)