def del_repeat(lis):    """删除list重复元    >>> del_repeat([0, 1, 2, 3, 2, 0, 4, 2])    [0, 1, 2, 3, 4]    """    b = {}    b = b.fromkeys(lis)    c = list(b.keys())    return c    # return list(set(lis))def del_repeat1(lis):    """删除重复元素    >>> del_repeat1([1, 3, 2, 0, 0, 1])    [0, 1, 2, 3]    """    lis.sort()    last = lis[-1]    for i in range(len(lis) - 2, -1, -1):        if last == lis[i]:            del lis[i]        else:            last = lis[i]    print(lis)def find_string(string, pattern):    """从文本中搜索并打印内容,要求支持通配符, *号, 和?    >>> find_string('hello\\nworld\\n', 'wor')    ['wor']    >>> find_string('hello\\nworld\\n', 'l*d')    ['ld']    >>> find_string('hello\\nworld\\n', 'o.')    ['or']    """    import re    return re.findall(pattern, string)def replace_char(str_in):    """替换中间    >>> replace_char('babble')    'ba**le'    """    # str_in = list(str_in)    # for i in range(1, len(str_in)):    #     if str_in[i] == str_in[0]:    #         str_in[i] = '*'    # return ''.join(str_in)    for i in range(1, len(str_in)):        if str_in[i] == str_in[0]:            str_in = str_in[:i] + "*" + str_in[i + 1:]    return str_indef splicing_str(str_in):    """ 切中间    >>> splicing_str('spring')    'spng'    >>> splicing_str('spn')    'sppn'    """    length = len(str_in)    if length < 2:        return ''    else:        return str_in[:2] + str_in[-2:]def equal_split(str_in):    """等长划分字符串    >>> equal_split('abcd')    ('ab', 'cd')    >>> equal_split('abcde')    ('abc', 'de')    """    length = len(str_in)    middle = length // 2    if length % 2 > 0:        middle += 1    return str_in[: middle], str_in[middle:]def judge_palindrome(str_in):    """判断是否是palindrome    >>> judge_palindrome('62426')    True    >>> judge_palindrome('abcba')    True    >>> judge_palindrome('624426')    True    >>> judge_palindrome('6124426')    False    """    length = len(str_in)    for i in range(0, (length // 2) + 1, 1):        if str_in[i] != str_in[length - i - 1]:            return False    return Truedef prime_num_of_two_num(num1, num2):    """    >>> prime_num_of_two_num(1, 10)    [1, 2, 3, 5, 7]    """    res = list()    for i in range(num1, num2 + 1):        flag = True        for j in range(2, i):            if i % j == 0:                flag = False                break        if flag:            res.append(i)    return resdef prime(a, b):    prime_list = [x for x in range(a, b) if 0 not in [x % y for y in range(2, x)]]    return prime_listif __name__ == '__main__':    import doctest    doctest.testmod()