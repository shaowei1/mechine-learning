from numpy import *def loadDataSet(fileName):    dataMat = []    fr = open(fileName)    for line in fr.readlines():        curline = line.strip().split('\t')        fltLine = map(float, curline)        dataMat.append(fltLine)    return dataMatdef distEclud(vecA, vecB):    """计算欧式空间"""    return sqrt(sum(power(vecA - vecB, 2)))def randCent(dataSet, k):    """    :param dataSet: 包含k个随机质心的集合。随机质心必须要在整个数据集的边界之内，这可以通过找到随机数据集每一维的最小和最大来完成    :param k:    :return: 生成0到1.0之间的随机数并通过取值范围和最小值， 以确保随机点在数据的边界之内    """    n = shape(dataSet)[1]    centroids = mat(zeros((k, n)))    # 构建簇质心    for j in range(n):        minJ = min(dataSet[:, j])        rangeJ = float(max(dataSet[:, j]) - minJ)        centroids[:, j] = minJ + rangeJ * random.rand(k, 1)    return centroidsdataMat = mat(loadDataSet('testSet.txt'))print(min(dataMat[:, 0]))print(min(dataMat[:, 1]))print(max(dataMat[:, 1]))print(max(dataMat[:, 0]))print(randCent(dataMat, 2))print(distEclud(dataMat[0], dataMat))"""创建k个质心，然后将每个点分配到最近的质心，再重新计算质心，这个过程重复数次，知道数据点的簇分配结果不再改变为止"""